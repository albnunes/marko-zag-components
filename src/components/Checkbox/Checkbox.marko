import * as checkbox from "@zag-js/checkbox";
import { normalizeProps } from "marko-zag/dist/normalize-props";
// import "marko-zag"
// import useMachine from "<use-machine>"
// import useMachine from "@tokilabs/marko-zag/dist/components/use-machine/use-machine.marko"
// import * as markoConst from "<const>"
export type Input = (checkbox.Context & {
  renderBody: Marko.Body<[checkbox.Api<any>]>;
}
);


<const/machine=(
  () =>{
    return checkbox.machine({
      id: input.id,
      checked: input.checked,
      dir: input.dir,
      disabled: input.disabled,
      form: input.form,
      getRootNode: input.getRootNode,
      ids: input.ids,
      invalid: input.invalid,
      name: input.name,
      onCheckedChange: input.onCheckedChange,
      required: input.required,
      value: input.value,
    }) 
  }
)/> 
<use-machine/[machineState, send] machine=machine/>
<const/api=checkbox.connect(machineState, send, normalizeProps as any)/>





<return=api/>

<label class="checkTest" ...api.rootProps>
  <span ...api.labelProps>
    <${input.renderBody}=[api]/>
    ${console.log("render body",input)}
  </span>
  <div ...api.controlProps/>
  <input class="sr-only" ...api.hiddenInputProps>
</label>

<style>
  .checkTest {
  color: red;
    display: flex;
    width: 200px;
    height: 100px;
    flex-direction: row-reverse;
    gap: 8px; /* Adjust according to your scale */
    user-select: none;
    cursor: pointer;
    font-size: 1.125rem; /* This is a common value for 'lg', but adjust as needed */
  }
</style>
