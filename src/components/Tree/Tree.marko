import * as tree from "@zag-js/tree-view";
import { normalizeProps } from "marko-zag";
import { type Input as BranchInput } from "<Branch>";
import { type Input as ItemInput } from "<Item>";
import { type Input as ActionInput } from "<Action>";

export type Input = (tree.Context & {
  id: string;
  class?: string;
  renderBody?: Marko.Body;
  branch?: Marko.RepeatableAttrTag<BranchInput> | BranchInput[]
  item?: Marko.RepeatableAttrTag<ItemInput> |  ItemInput[]
  action?: Marko.RepeatableAttrTag<ActionInput> | ActionInput[];
}
);

<const/branches=[...(input.branch || [])]/>
<const/items=[...(input.item || [])]/>
<const/actions=[...(input.action || [])]/>

<const/machine=(
  () => {
    return tree.machine({
      id: input.id,
    });
  }
)/>

<use-machine/[machineState, send] machine=machine as any/>

<const/api=(
  tree.connect(machineState as any, send, normalizeProps as any) as any
)/>
<set=api>

  <div ...api.rootProps>
    <ul ...api.treeProps>
      <${input.renderBody}=[api]/>
      <for|item| of=actions>
        <if=item.renderBody>
          <${item.renderBody}/>
        </if>
        <else>
          <${item}/>
        </else>
      </for>

      <for|item| of=branches>
        <Branch ...item key=(item.branchProps.id)/>
      </for>

      <for|item| of=items>
        <Item ...item key=(item.branchProps.id)/>
      </for>
    </ul>
  </div>
</set>

<return=api/>
