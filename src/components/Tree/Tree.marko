import * as tree from "@zag-js/tree-view";
import { normalizeProps } from "marko-zag/dist/normalize-props";
import { type Input as BranchInput } from "<Branch>";
import { type Input as ItemInput } from "<Item>";
// import * as style from "./style.module.css"

export type Input = (tree.Context & {
  renderBody?: Marko.Body<[tree.Api]>;
  branch?: Marko.RepeatableAttrTag<BranchInput> | BranchInput[]
  item?: Marko.RepeatableAttrTag<ItemInput> |  ItemInput[]
  id: string
}
);

<${console.log("input tree", input)}/>
<${console.log("input tree", input.renderBody)}/>

<const/branches=[...(input.branch || [])]/>
<const/items=[...(input.item || [])]/>
<const/machine=(
  () => {
    return tree.machine({
      id: input.id,
    });
  }
)/>
<use-machine/[machineState, send] machine=machine as any/>

<const/api value=(tree.connect(machineState, send, normalizeProps as any) as any)/>
<${console.log("tree api", api)}/>
<div ...api.rootProps>
  <ul ...api.treeProps>
    <set=api>
      <!-- All children can request the context attributes anywhere in the tree -->
      <${input.renderBody}=[api]/>

      <for|item| of=branches>
        <Branch ...item key=(item.branchProps.id)/>
      </for>

      <for|item| of=items>
        <Item ...item key=(item.branchProps.id)/>
      </for>
    </set>
  </ul>
</div>
<style>
  .icon-container {
    display: flex; /* Ensures the images within are side by side */
    align-items: center; /* Centers the images vertically */
    justify-content: start; /* Aligns the images to the start */
    margin-left: 10px; /* Optional: adds some space between the text and the images */
  }
</style>
<return=api/>
