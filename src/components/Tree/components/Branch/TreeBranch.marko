import * as tree from "@zag-js/tree-view";
import openVisible from "../../../../assets/openVisible.svg";
import closeVisible from "../../../../assets/closeVisible.svg";
import openLock from "../../../../assets/openLock.svg";
import closeLock from "../../../../assets/closeLock.svg";
import mixedIcon from "../../../../assets/mixed.svg";
export type Input = ( {
    renderBody?: Marko.Body;
    // api: tree.Api
    branchProps: {
        depth: number;
        id: string;
        disabled?: boolean;
    }
    name:string
}
);

<get/api="Tree"/>
<get/father="."/>

<let/hidden=false/>
<let/locked=false/>
<let/mixed=false/>

<${console.log("treeBranch api: ", api)}/>
<${console.log("treeBranch father: ", father)}/>

<div class={
    locked,
    hidden,
}>
    <set={ hidden, locked, mixed }>

        <li ...api.getBranchProps(input.branchProps)>

            <div
                class="branch-control-icons"
                ...api.getBranchControlProps(input.branchProps)
            >
                <span ...api.getBranchTextProps(input.branchProps)>
                    ${input.name}
                </span>
                <div class="icon-container">
                    <if=((father && !father.hidden && !father.mixed) || !father)>
                        ${mixed = false}
                        <img
                            src=(hidden ? closeVisible : openVisible)
                            onClick(event) {
                                event.stopPropagation();
                                hidden = !hidden;
                                console.log("PROPS INSIDE THE HIDDEN", event);
                            }
                        >
                    </if>
                    <else>
                        ${mixed = true}
                        <img
                            src=mixedIcon
                            onClick(event) { event.stopPropagation(); }
                        >
                    </else>
                    <if=((father && !father.locked && !father.mixed) || !father)>
                        ${mixed = false}
                        <img
                            src=(locked ? closeLock : openLock)
                            onClick(event) {
                                event.stopPropagation();
                                locked = !locked;
                            }
                        >
                    </if>
                    <else>
                        ${mixed = true}
                        <img
                            src=mixedIcon
                            onClick(event) { event.stopPropagation(); }
                        >
                    </else>
                    <!-- <if=father && !father.locked && !father.hidden && mixed>
                        ${(mixed = false)}
                    </if> -->
                </div>
                <!-- ${console.log("icon props",iconProps)} -->
            </div>
            <ul ...api.getBranchContentProps(input.branchProps)>
                <!-- All children can request the context attributes anywhere in the tree -->
                <${input.renderBody}/>
            </ul>
        </li>
    </set>
</div>

<style>
    .branch-control-icons {
        display: flex; /* This ensures the span and the div with images are side by side */
        align-items: center; /* Centers them vertically */
    }

    .hidden {
        opacity: 0.5;
    }
</style>
