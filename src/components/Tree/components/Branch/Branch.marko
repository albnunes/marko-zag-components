import { type Input as ItemInput } from "<Item>";
import * as tree from "@zag-js/tree-view";
import { type Input as ActionInput } from "<Action>";
static type InputProps = {
    branchProps: {
        id: string;
        depth: number;
        disabled?: boolean;
    }
    class?: string;
    name?: string;
    renderBody?: Marko.Body;
    branch?: Marko.RepeatableAttrTag<Input> | Input[]
    item?: Marko.RepeatableAttrTag<ItemInput> |  ItemInput[]
    action?: Marko.RepeatableAttrTag<ActionInput> | ActionInput[] 
};


<const/branches=[...(input.branch || [])]/>
<const/items=[...(input.item || [])]/>
<const/actions=[...(input.action || [])]/>

export type Input = (InputProps & { value: string }) | InputProps;
<get/api="Tree"/>

<li class=input.class ...(api as tree.Api).getBranchProps(input.branchProps)>
    <div ...(api as tree.Api).getBranchControlProps(input.branchProps)>
        <for|item| of=actions>
            <if=item.renderBody>
                <${item.renderBody}/>
            </if>
            <else>
                <${item}/>
            </else>
        </for>

        <span ...(api as tree.Api).getBranchTextProps(input.branchProps)>
            ${input.name}
        </span>
    </div>
    <ul ...(api as tree.Api).getBranchContentProps(input.branchProps)>
        <${input.renderBody}/>

        <for|item| of=branches>
            <Branch ...item key=(item.branchProps.id)/>
        </for>

        <for|item| of=items>
            <Item ...item key=(item.branchProps.id)/>
        </for>
    </ul>
</li>
